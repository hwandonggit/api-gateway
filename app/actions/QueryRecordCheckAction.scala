package actions

import javax.inject.Inject
import mapping.response.Error
import play.api.Configuration
import play.api.libs.json.Json
import play.api.mvc._
import utils.logger.LogWriter

import scala.concurrent._

/** Action to check json parameters .
  *
  * @param parser the default body parser within play framework - [[https://www.playframework.com/documentation/2.6.x/ScalaBodyParsers]]
  * @param logger the logger writer utils
  * @param ec     the default [[ExecutionContext]]- [[https://www.scala-lang.org/api/2.10.0/index.html#scala.concurrent.ExecutionContext]]
  */
class QueryRecordCheckAction @Inject()(val parser: BodyParsers.Default,
                                       logger: LogWriter,
                                       config: Configuration)
                                      (implicit ec: ExecutionContext)
  extends ActionFilter[QueryESRecordRequest] {

  def executionContext = ec

  /** filter component
    *
    * @param request auto generated by the out put of pre action
    * @return
    */
  override def filter[A](request: QueryESRecordRequest[A]) = Future.successful {
    request.query match {
      case Some(r) => goSuccess
      case None => goFailed
    }
  }

  /** forward the request
    *
    * @return simply None, the action will forward the request
    */
  private def goSuccess = None

  /** block request, generate a fail response
    *
    * @return the play [[Results]] type, which will be parsed as a http bad request response(code: 400)
    */
  private def goFailed = {
    implicit val reads = Json.reads[Error]
    Some(Results.BadRequest(new Error(
      "Invalid parameter.",
      "query es record").toJson))
  }
}

