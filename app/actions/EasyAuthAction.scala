package actions

import javax.inject.Inject

import play.api.Configuration
import play.api.mvc._
import utils.logger.LogWriter

import scala.concurrent._

/** filter the request with correct token, see 'easy_auth.key' and 'easy_auth.secret' in 'application.conf'
  *
  * @param logger [[LogWriter]]
  * @param parser default body parser, [[https://www.playframework.com/documentation/2.6.x/ScalaBodyParsers]]
  * @param config system config, more detail in 'application.conf' by default
  * @param ec     default excution context for create future [[https://docs.scala-lang.org/overviews/core/futures.html]]
  */
class EasyAuthAction @Inject()(val parser: BodyParsers.Default,
                               logger: LogWriter,
                               config: Configuration)
                              (implicit ec: ExecutionContext)
  extends ActionFilter[Request] with ActionBuilder[Request, AnyContent] {

  def executionContext = ec

  /** filter component
    *
    * @param request auto generated by the out put of pre action
    * @return
    */
  override def filter[A](request: Request[A]) = Future.successful {
    val key = config.underlying.getString("easy_auth.key")
    val secret = config.underlying.getString("easy_auth.secret")
    if (!request.headers.get(key).contains(secret)) Some(Results.Forbidden("need token")) else None
    // TODO: to enable auth by removing NONE
    None
  }
}
